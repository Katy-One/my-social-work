{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPost/MyPost.module.css","components/Profile/ProfileInfo/StatusProfile/StatusProfile.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/MyPost/MyPost.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContaner.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","StatusProfile","status","updateStatus","console","log","useState","editMode","setStateEditMode","status1","setStateStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","type","ReduxDataForm","reduxForm","form","props","handleSubmit","pristine","submitting","reset","error","onSubmit","ownerId","disabled","CreateInput","required","Input","label","TextArea","Object","keys","profile","contacts","map","key","className","style","formSummeryError","ProfileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactsTitle","contactsValue","Contact","ProfileInfo","Preloader","s","avatar","src","photos","large","alt","initialValues","saveProfile","then","MyPost","item","massage","like","ReduxMyPostForm","maxLength10","MyPosts","arr_post","posts","el","i","id","data","length","text","newPostText","addPostText","MyPostsContainer","connect","state","profilePage","postInfo","actions","updateNewPostText","Profile","setPhotoApi","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUsersProfile","getStatus","changeUserId","prevProps","prevState","React","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.5da70731.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__3e3CD\",\"avatar\":\"ProfileInfo_avatar__4tY8g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPost_item__3UU6u\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\ntype PropsType={\r\n    status: string\r\n    updateStatus:(status1:string)=>void\r\n}\r\ntype StateType={\r\n\r\n\r\n}\r\n\r\nconst StatusProfile : React.FC<PropsType> = ({status, updateStatus}) => {\r\n    console.log(status)\r\n    let [editMode, setStateEditMode] = useState(false)\r\n    let [status1, setStateStatus] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setStateStatus(status)\r\n    }, [status])\r\n\r\n\r\n    let activateMode = () => {\r\n        setStateEditMode(true)\r\n    }\r\n    let deActivateMode = () => {\r\n        setStateEditMode(false)\r\n      updateStatus(status1)\r\n    }\r\n    let updateStatusNew = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setStateStatus(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return <div>\r\n        {!editMode &&\r\n        <span onDoubleClick={activateMode}>{status || 'here can be your status...'}</span>\r\n        }\r\n        {editMode &&\r\n        < input onChange={updateStatusNew} autoFocus={true} onBlur={deActivateMode} value={status1} type=\"text\"/>\r\n        }\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default StatusProfile","import React from \"react\";\r\nimport {CreateInput, Input, TextArea} from \"../../common/FormControls/FormControls\";\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\n\r\nimport {required} from \"../../../utils/validator/validator\";\r\nimport style from \"../../common/FormControls/FormControls.module.css\";\r\nimport {LoginFormType} from \"../../Login/Login\";\r\nimport {profileType} from \"../../../redux/profile-reducer\";\r\n\r\ntype  ProfileDataFormType ={\r\n\r\n\r\n}\r\ntype ProfileDataFormKeysType = keyof profileType\r\ninterface Props {\r\n    ownerId:boolean\r\n    profile: profileType\r\n\r\n}\r\nconst ProfileDataForm:React.FC <InjectedFormProps <profileType  , Props >& Props > = (props) => {\r\n    console.log(props)\r\n    const {handleSubmit, pristine, reset, submitting, error} = props\r\n    return <form onSubmit={handleSubmit}>\r\n        {props.ownerId && <button disabled={pristine || submitting}>Save</button>}\r\n        <div>{CreateInput<ProfileDataFormKeysType>('', 'fullName', [required], Input, {type: 'text', label: 'Full Name:'})}</div>\r\n        <div>{CreateInput<ProfileDataFormKeysType>('', 'lookingForAJob', [], Input, {type: 'checkbox', label: 'Looking for a job:'})}</div>\r\n        {CreateInput<ProfileDataFormKeysType>('', 'lookingForAJobDescription', [], TextArea, {type: 'text', label: 'My professional skills:'})}\r\n        {CreateInput<ProfileDataFormKeysType>('', 'aboutMe', [], TextArea, {type: 'text', label: 'About me:'})}\r\n\r\n        <div><b>Contact:</b>\r\n            {Object.keys(props.profile.contacts).map(key => {\r\n                // todo: create some solution\r\n                return <div key={key}>{CreateInput('', 'contacts.' + key, [], Input, {\r\n                    type: 'text',\r\n                    label: `${key}:`\r\n                })}</div>\r\n            })}\r\n            {\r\n                props.error && <div className={style.formSummeryError}>{props.error}</div>\r\n            }\r\n        </div>\r\n\r\n\r\n    </form>\r\n}\r\nconst ReduxDataForm = reduxForm <profileType, Props>({\r\n    // a unique name for the form\r\n    form: 'dataForm',\r\n\r\n})(ProfileDataForm)\r\n\r\n\r\nexport default ReduxDataForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport StatusProfile from \"./StatusProfile/StatusProfile\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {contactType, PhotosType, profileType} from \"../../../redux/profile-reducer\";\r\ntype ProfileInfoType ={\r\n    profile:  profileType | null,\r\n    setPhotoApi: (file: File)=> void\r\n    updateStatus:(status1:string)=>void\r\n    // aboutMe: string,\r\n    // lookingForAJob: boolean,\r\n    // lookingForAJobDescription: string,\r\n    // fullName: string,\r\n    // userId: number,\r\n    // contacts: contactType,\r\n    // photos: PhotosType\r\n    saveProfile: (profile: profileType) => Promise<any>\r\n  //  authorizedUserId: number\r\n    ownerId:boolean\r\n    status: string,\r\n    // posts: string,\r\n  //  id: number,\r\n}\r\nconst ProfileInfo: React.FC<ProfileInfoType> = (props) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    let [editMode, setStateEditMode] = useState(false)\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    let [state, setState] = useState(false)\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    let onChangeFile = (e:ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (e.target.files && e.target.files.length) {\r\n            props.setPhotoApi(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    let onSubmitForm = (profile:profileType) => {\r\n\r\n        props.saveProfile(profile).then(\r\n            () => {\r\n                setStateEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <div className={s.avatar}>\r\n                <img src={props.profile.photos.large || ''} alt=\"\"/>\r\n            </div>\r\n\r\n            {/*{props.id == props.authorizedUserId ?*/}\r\n            {/*<div>*/}\r\n            {/*    <input type=\"file\" name=\"myImage\" onChange={onChangeFile}/>*/}\r\n            {/*</div> :*/}\r\n            {/*    <NavLink to={'/dialogs/' + props.id} onClick={()=> {setState(true)}} className={s.dialog} activeClassName={s.active}>Message</NavLink>*/}\r\n\r\n            {/*}*/}\r\n\r\n            <StatusProfile status={props.status} updateStatus={props.updateStatus}/>\r\n            {editMode ? <ProfileDataForm\r\n                    initialValues={props.profile}\r\n                    ownerId={props.ownerId}\r\n                    profile={props.profile}\r\n                    onSubmit={onSubmitForm}/> :\r\n                <ProfileData ownerId={props.ownerId}\r\n                             setStateEditMode={() => {\r\n                                    setStateEditMode(true)}}\r\n                             profile={props.profile}/>}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\ntype ProfileDataType ={\r\n    ownerId:boolean\r\n    setStateEditMode:()=> void\r\n    profile: profileType\r\n}\r\nconst ProfileData: React.FC<ProfileDataType> = (props) => {\r\n    return <div>\r\n        {/*{!props.ownerId &&  <Redirect to={'/login'}/>}*/}\r\n        {props.ownerId && <button onClick={props.setStateEditMode}>Edit</button>}\r\n        <div><b>Full name:</b>{props.profile.fullName}</div>\r\n        <div><b>Looking for a job:</b>{props.profile.lookingForAJob ? 'yes' : 'no'} </div>\r\n        {props.profile.lookingForAJob &&\r\n        <div><b>My professional skills:</b> {props.profile.lookingForAJobDescription}</div>\r\n        }\r\n        <div><b>About me:</b> {props.profile.aboutMe}</div>\r\n\r\n        <div><b>Contact:</b>\r\n            {Object.keys(props.profile.contacts).map(key => {\r\n                return <Contact key={key} contactsTitle={key} contactsValue={props.profile.contacts[key as keyof contactType]}/>\r\n            })}\r\n\r\n        </div>\r\n\r\n\r\n    </div>\r\n}\r\ntype ContactsTypeProps ={\r\n    contactsTitle: string\r\n    contactsValue:string\r\n}\r\nconst Contact: React.FC <ContactsTypeProps> = ({contactsTitle, contactsValue}) => {\r\n    return <div>\r\n        <b>{contactsTitle}:</b> <span>{contactsValue}</span>\r\n    </div>\r\n\r\n}\r\nexport default ProfileInfo","import React from \"react\";\r\nimport s from \"./MyPost.module.css\";\r\nimport {postInfoType} from \"../../../../redux/profile-reducer\";\r\ntype MyPostsProps = {\r\n    id: number,\r\n    massage: string,\r\n    like: number\r\n}\r\nconst MyPost: React.FC<MyPostsProps> = (props) => {\r\n\r\n    return <div className={s.item}>\r\n\r\n        <img\r\n            src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQIeKxpjPeCtvBoU7BD3oxt0ZdwtmynAqlpR15w2bHTA2oyJhZU\"\r\n            alt=\"\"/>\r\n        {props.massage}\r\n        <span>{props.like}</span>\r\n    </div>\r\n\r\n}\r\nexport default MyPost","import React from \"react\";\r\nimport MyPost from './MyPost/MyPost'\r\nimport {Field, reset, reduxForm, InjectedFormProps} from 'redux-form'\r\nimport {maxLength10, required} from \"../../../utils/validator/validator\";\r\nimport {CreateInput, Input, TextArea} from \"../../common/FormControls/FormControls\";\r\nimport {Dispatch} from \"redux\";\r\nimport {postInfoType} from \"../../../redux/profile-reducer\";\r\n\r\ntype PostFormType = {\r\n    newPostText: string\r\n}\r\ntype PostFormKeysType = keyof PostFormType\r\ninterface Props {\r\n    // text: string |null\r\n}\r\nconst MyPostForm: React.FC<InjectedFormProps<PostFormType, Props> & Props> = (props) => {\r\n    const {handleSubmit, pristine, reset, submitting} = props\r\n    // const {createRecord, resetForm} = props;\r\n\r\n\r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            {CreateInput<PostFormKeysType>('post text', 'newPostText', [required, maxLength10], TextArea)}\r\n\r\n            <div>\r\n                {/*<Field name='post_text' component={TextArea} validate={[required, maxLength10]}/>*/}\r\n            </div>\r\n\r\n\r\n            <button disabled={props.pristine || props.submitting}>Add post</button>\r\n        </form>\r\n    )\r\n\r\n}\r\nconst afterSubmit = (result: any, dispatch: Dispatch<any>) => dispatch(reset('login'));\r\nconst ReduxMyPostForm = reduxForm<PostFormType , Props>({\r\n    // a unique name for the form\r\n    form: 'login',\r\n     // onSubmitSuccess: afterSubmit,\r\n})(MyPostForm)\r\ntype MyPostsProps ={\r\n    posts: Array<postInfoType>,\r\n    // newPostText:string\r\n}\r\nexport type DispatchPostsProps ={\r\n    addPostText: (id:number, text:string)=>void,\r\n    // updateNewPostText:( text:string)=>void,\r\n}\r\nconst MyPosts: React.FC<MyPostsProps & DispatchPostsProps> = (props) => {\r\n    console.log(props)\r\n    let arr_post = props.posts.map((el, i) => <MyPost massage={el.massage} id={i + 1} like={el.like}/>);\r\n    //let newPostElement = React.createRef()\r\n    // const onPostChange = () => {\r\n    //     let text = newPostElement.current.value;\r\n    // }\r\n    let submitPostForm = (data:PostFormType) => {\r\n        let id = props.posts.length + 1;\r\n        let text = data.newPostText\r\n        props.addPostText(id, text)\r\n        // props.updateNewPostText(text)\r\n    }\r\n    return <div>\r\n        <div>\r\n            <h3> My post</h3>\r\n        </div>\r\n        {/*text={props.newPostText}*/}\r\n        < ReduxMyPostForm onSubmit={submitPostForm} />\r\n        <div>\r\n            {arr_post}\r\n        </div>\r\n    </div>\r\n}\r\nexport default MyPosts","import React from \"react\";\r\nimport {\r\n\r\n    actions\r\n} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.postInfo,\r\n         // newPostText:state.profilePage.newPostText\r\n    };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,{\r\n    addPostText: actions.addPostText,\r\n    updateNewPostText: actions.updateNewPostText})(MyPosts)\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContaner\";\r\nimport {profileType} from \"../../redux/profile-reducer\";\r\ntype ProfileProps ={\r\n    profile:  profileType | null,\r\n    setPhotoApi: (file: File)=> void\r\n    saveProfile: (profile: profileType) => Promise<any>\r\n    updateStatus:(status1:string)=>void\r\n    //authorizedUserId: number\r\n    ownerId:boolean\r\n    status: string,\r\n\r\n}\r\n\r\nconst Profile:React.FC<ProfileProps> = (props) => {\r\nconsole.log(props)\r\n\r\n    return  <div >\r\n      <ProfileInfo saveProfile={props.saveProfile}\r\n                   ownerId={props.ownerId}\r\n                   setPhotoApi={props.setPhotoApi}\r\n                   profile={props.profile}\r\n                   status={props.status}\r\n                   updateStatus={props.updateStatus}\r\n                    // id={props.match.params.userId}\r\n                    // getUsersProfile={props.getUsersProfile}\r\n                    // authorizedUserId={props.authorizedUserId}\r\n\r\n        />\r\n      <MyPostsContainer/>\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatus,\r\n    getUsersProfile,\r\n    setPhotoApi,\r\n    updateStatus,\r\n    saveProfile,\r\n    profileType\r\n} from \"../../redux/profile-reducer\";\r\n\r\nimport {Redirect, withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDistpatchType = {\r\n    getUsersProfile: (userId: number) => void,\r\n    getStatus: (userId: number) => void,\r\n    updateStatus: (status1: string) => void\r\n    setPhotoApi: (file: File) => void,\r\n    saveProfile: (profile: profileType) => Promise<any>\r\n}\r\ntype OwnProperty = {}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n\r\ntype PropsType = MapStatePropsType & MapDistpatchType & OwnProperty & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n\r\n        super(props);\r\n    }\r\n\r\n    changeUserId() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUsersProfile(userId as number)\r\n        this.props.getStatus(userId as number)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.changeUserId()\r\n    }\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.changeUserId()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        {\r\n            // if (this.props.isAuth === false && this.props.location.pathname === '/profile') {\r\n            //     return <Redirect to={'/login'}/>\r\n            // }\r\n        }\r\n        return <>\r\n\r\n            <div>\r\n                <Profile  {...this.props}\r\n                          ownerId={!this.props.match.params.userId}\r\n                          profile={this.props.profile}\r\n                          status={this.props.status}\r\n                          updateStatus={this.props.updateStatus}\r\n                          saveProfile={this.props.saveProfile}\r\n                    // getUsersProfile={this.props.getUsersProfile}\r\n                    // id={this.props.match.params.userId }\r\n                    // setPhotoApi={this.props.setPhotoApi}\r\n                />\r\n            </div>\r\n\r\n\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    // photo: state.profilePage.photo\r\n})\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    getUsersProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    setPhotoApi,\r\n    saveProfile\r\n}), withRouter)(ProfileContainer)\r\n"],"sourceRoot":""}
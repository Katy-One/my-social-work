{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialogs.tsx","hoc/AuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","ReduxDialogsForm","reduxForm","form","props","handleSubmit","pristine","reset","submitting","onSubmit","CreateInput","required","maxLength10","TextArea","disabled","DialogItem","path","id","to","className","s","dialog","activeClassName","active","name","Message","message","Dialogs","state","dialogsPage","dialogs","names","map","el","i","value","addMessageActionCreator","post_text","dialogsItem","messagesList","mapStateToPropsRedirect","isAuth","auth","compose","connect","messagePage","actions","Component","restProps"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,0B,+HCuCtIC,EAAmBC,YAA8B,CAEnDC,KAAM,SAFeD,EAtB2D,SAACE,GAC7BA,EAA7CC,aAA6CD,EAA/BE,SAA+BF,EAArBG,MAAqBH,EAAdI,WACtC,OAEI,0BAAMC,SAAUL,EAAMC,cAGlB,6BACKK,YAAoC,YAAa,YAAa,CAACC,IAAUC,KAAcC,MAO5F,4BAAQC,SAAUV,EAAME,UAAYF,EAAMI,YAA1C,gBAYNO,EAAiC,SAACX,GACpC,IAAIY,EAAO,YAAcZ,EAAMa,GAC/B,OACI,kBAAC,IAAD,CAASC,GAAIF,EAAMG,UAAWC,IAAEC,OAAQC,gBAAiBF,IAAEG,QAASnB,EAAMoB,OAG5EC,EAAiC,SAACrB,GACpC,OACI,yBAAKe,UAAU,WAAWf,EAAMsB,UA0EzBC,EAzDyB,SAACvB,GACrC,IAAIwB,EAAQxB,EAAMyB,YASlB,OAuBI,yBAAKV,UAAWC,IAAEU,SACd,6BAEI,6BACKF,EAAMG,MAAMC,KAAI,SAACC,EAAIC,GAElB,OAAO,kBAAC,EAAD,CAASR,QAASO,EAAGT,KAAMP,GAAIgB,EAAGhB,SAKjD,kBAAChB,EAAD,CAAkBQ,SAtCd,SAAC0B,GACb/B,EAAMgC,wBAAwBD,EAAME,UAJlC,OA2CM,yBAAKlB,UAAWC,IAAEkB,aACbV,EAAMW,aAAaP,KAAI,SAACC,EAAIC,GAAL,OACpB,kBAAC,EAAD,CAAYV,KAAMS,EAAGP,QAAST,GAAIgB,EAAGhB,W,wBClHzDuB,EAA0B,SAACZ,GAC3B,MAAO,CACHa,OAAQb,EAAMc,KAAKD,S,WCeZE,sBAA6BC,aAXtB,SAAChB,GACnB,MAAO,CACHC,YAAaD,EAAMiB,eASwB,eAAsBC,ODRlE,SAA+BC,GAWlC,OADoCH,YAA+CJ,EAA/CI,EATW,SAACxC,GAAS,IACxDqC,EAAuBrC,EAAvBqC,OAAWO,EAD4C,YAChC5C,EADgC,YAGhD,OAAIqC,EAGG,kBAACM,EAAcC,GAFZ,kBAAC,IAAD,CAAU9B,GAAI,gBCGrByB,CAAuFhB","file":"static/js/4.2059ff8a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__9RJvu\",\"dialogsItems\":\"Dialogs_dialogsItems__2d6mv\",\"dialog\":\"Dialogs_dialog__2Bg4t\",\"active\":\"Dialogs_active__1q1Hv\"};","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {initialStateType, MessageType, NameType} from \"../../redux/message-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {CreateInput, TextArea} from \"../common/FormControls/FormControls\";\r\nimport {maxLength10, required} from \"../../utils/validator/validator\";\r\n\r\n\r\nexport  type NewMassageFormType = {\r\n    post_text: string\r\n}\r\ntype  NewMassageFormKeysType = keyof NewMassageFormType\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nconst DialogsForm: React.FC<InjectedFormProps<NewMassageFormType, Props> & Props> = (props) => {\r\n    const {handleSubmit, pristine, reset, submitting} = props\r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n\r\n            <div>\r\n                {CreateInput<NewMassageFormKeysType>('post text', 'post_text', [required, maxLength10], TextArea)}\r\n\r\n                {/*<Field placeholder={'post text'} name={'post_text'} component={TextArea}*/}\r\n                {/*       validate={[required, maxLength10]}/>*/}\r\n            </div>\r\n\r\n\r\n            <button disabled={props.pristine || props.submitting}>Add post</button>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst ReduxDialogsForm = reduxForm<NewMassageFormType>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(DialogsForm)\r\n\r\nconst DialogItem: React.FC<NameType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <NavLink to={path} className={s.dialog} activeClassName={s.active}>{props.name}</NavLink>\r\n    )\r\n}\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className=\"message\">{props.message}</div>\r\n    )\r\n}\r\ntype ownPropsType2 = {\r\n    message: any\r\n}\r\ntype ownPropsType3 = {\r\n    name: any,\r\n    id: any\r\n}\r\ntype ownPropsType = {\r\n    dialogsPage: initialStateType,\r\n    addMessageActionCreator: (messageText: string, id:number) => void,\r\n    match: any,\r\n    id: any,\r\n\r\n}\r\nconst Dialogs: React.FC<ownPropsType> = (props) => {\r\n    let state = props.dialogsPage\r\n\r\n let id = 1\r\n    // console.log(id)\r\n    // let [state1, setState] = useState(false)\r\n    let addSubmit = (value: NewMassageFormType) => {\r\n        props.addMessageActionCreator(value.post_text, id)\r\n    }\r\n\r\n    return (\r\n        // <div className={s.dialogs}>\r\n        //     {id ?\r\n        //         <div>\r\n        //             <ReduxDialogsForm onSubmit={addSubmit}/>\r\n        //             <div>\r\n        //                 {state.messagesList.map((el, i) => {\r\n        //                     if (id == el.id) {\r\n        //                         return <Message message={el.message} id={el.id}/>\r\n        //                     }\r\n        //\r\n        //                 })}\r\n        //             </div>\r\n        //         </div> :\r\n        //         <div className={s.dialogsItem}>\r\n        //             {state.names.map((el, i) =>\r\n        //                 <DialogItem name={el.name} id={el.id}/>\r\n        //             )}\r\n        //         </div>\r\n        //\r\n        //\r\n        //     }\r\n        // </div>\r\n        <div className={s.dialogs}>\r\n            <div>\r\n\r\n                <div>\r\n                    {state.names.map((el, i) => {\r\n                        // if (id == el.id) {\r\n                        return <Message message={el.name} id={el.id}/>\r\n                        // }\r\n\r\n                    })}\r\n                </div>\r\n                <ReduxDialogsForm onSubmit={addSubmit}/>\r\n            </div>\r\n                <div className={s.dialogsItem}>\r\n                    {state.messagesList.map((el, i) =>\r\n                        <DialogItem name={el.message} id={el.id}/>\r\n                    )}\r\n                </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nlet mapStateToPropsRedirect = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    };\r\n};\r\ntype MapPropsType={\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<WPC>(Component: React.ComponentType<WPC>){\r\n  const  RedirectComponent: React.FC<MapPropsType>=(props)=>{\r\nlet {isAuth, ...restProps} =props\r\n\r\n            if(!isAuth){\r\n             return   <Redirect to={'/login'} />\r\n            }\r\n            return <Component {...restProps as WPC}/>\r\n\r\n    }\r\n    let ConnectedAuthRedirectComponent =connect<MapPropsType , {}, WPC , AppStateType>(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from 'react';\r\n\r\nimport {actions} from \"../../redux/message-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.messagePage,\r\n        // dialogs: state.messagePage.names,\r\n        // textMessage: state.messagePage.textMessage,\r\n        // message: state.messagePage.messagesList,\r\n\r\n    };\r\n};\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {...actions}), withAuthRedirect)(Dialogs)\r\n"],"sourceRoot":""}
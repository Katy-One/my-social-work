{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Katerina\\\\PhpstormProjects\\\\react-practice\\\\src\\\\hoc\\\\AuthRedirect.js\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nlet mapStateToPropsRedirect = state => {\n  return {\n    isAuth: state.auth.isAuth\n  };\n};\n\nexport let withAuthRedirect = Component => {\n  class RedirectComponent extends React.Component {\n    render() {\n      console.log(this.props);\n\n      if (!this.props.isAuth) {\n        return React.createElement(Redirect, {\n          to: '/login',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(Redirect, {\n          to: '/',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Component, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent);\n  return ConnectedAuthRedirectComponent;\n};","map":{"version":3,"sources":["C:/Users/Katerina/PhpstormProjects/react-practice/src/hoc/AuthRedirect.js"],"names":["React","Redirect","connect","mapStateToPropsRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","render","console","log","props","ConnectedAuthRedirectComponent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AACA,IAAIC,uBAAuB,GAAIC,KAAD,IAAW;AACrC,SAAO;AACHC,IAAAA,MAAM,EAAED,KAAK,CAACE,IAAN,CAAWD;AADhB,GAAP;AAGH,CAJD;;AAOA,OAAO,IAAIE,gBAAgB,GAAEC,SAAD,IAAa;AACrC,QAAMC,iBAAN,SAAgCT,KAAK,CAACQ,SAAtC,CAA+C;AAE3CE,IAAAA,MAAM,GAAG;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;;AACA,UAAG,CAAC,KAAKA,KAAL,CAAWR,MAAf,EAAsB;AAClB,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAE,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAFD,MAEK;AACD,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAE,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AACD,aAAO,oBAAC,SAAD,oBAAe,KAAKQ,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH;;AAV0C;;AAY/C,MAAIC,8BAA8B,GAAEZ,OAAO,CAACC,uBAAD,CAAP,CAAiCM,iBAAjC,CAApC;AACA,SAAOK,8BAAP;AACH,CAfM","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nlet mapStateToPropsRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    };\r\n};\r\n\r\n\r\nexport let withAuthRedirect=(Component)=>{\r\n    class RedirectComponent extends React.Component{\r\n\r\n        render() {\r\n            console.log(this.props)\r\n            if(!this.props.isAuth){\r\n                return <Redirect to={'/login'} />\r\n            }else{\r\n                return <Redirect to={'/'} />\r\n            }\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent =connect(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}"]},"metadata":{},"sourceType":"module"}
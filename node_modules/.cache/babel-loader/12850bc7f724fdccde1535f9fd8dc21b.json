{"ast":null,"code":"import { ProfileAPI, UserAPI } from \"../api/api\";\nlet updateNewTextPost = 'updateNewTextPost';\nlet addpost = 'ADD-POST';\nlet SET_USER_PROFILE = 'SET_USER_PROFILE';\nlet SET_STATUS = 'SET_STATUS';\nlet SET_PHOTO = 'SET_PHOTO';\nlet initialState = {\n  postInfo: [{\n    id: 1,\n    massage: 'post1',\n    like: 12\n  }, {\n    id: 2,\n    massage: 'post2',\n    like: 20\n  }, {\n    id: 3,\n    massage: 'post3',\n    like: 1\n  }],\n  profile: null,\n  status: '',\n  photo: null\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case addpost:\n      let newPost = {\n        id: action.id,\n        massage: action.text,\n        like: 0\n      };\n      return { ...state,\n        postInfo: [...state.postInfo, newPost]\n      };\n\n    case updateNewTextPost:\n      return { ...state,\n        newPostText: action.nextText\n      };\n\n    case SET_USER_PROFILE:\n      return { ...state,\n        profile: action.profile\n      };\n\n    case SET_STATUS:\n      return { ...state,\n        status: action.status\n      };\n\n    case SET_PHOTO:\n      return { ...state,\n        photo: action.photo\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const addPostText = (id, text) => {\n  return {\n    type: addpost,\n    id: id,\n    text\n  };\n};\nexport const setStatusProfile = status => {\n  return {\n    type: SET_STATUS,\n    status: status\n  };\n};\nexport const updateNewPostText = text => {\n  return {\n    type: updateNewTextPost,\n    nextText: text\n  };\n};\nexport const setUsersProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setUsersPhoto = photo => ({\n  type: SET_PHOTO,\n  photo\n});\nexport const setPhotoApi = (formData, config) => {\n  debugger;\n  return async dispatch => {\n    let response = await ProfileAPI.photo(formData, config);\n\n    if (response.data.resultCode == 0) {\n      // console.log(response.data.data.photos.small)\n      setUsersPhoto(response.data.data.photos.small);\n    }\n  };\n};\nexport const getUsersProfile = userId => {\n  return async dispatch => {\n    let response = await UserAPI.getProfile(userId);\n    dispatch(setUsersProfile(response.data));\n  };\n};\nexport const getStatus = userId => {\n  return async dispatch => {\n    let response = await ProfileAPI.getStatus(userId);\n    dispatch(setStatusProfile(response.data));\n  };\n};\nexport const updateStatus = status => {\n  return async dispatch => {\n    let response = await ProfileAPI.setStatus(status);\n\n    if (response.data.resultCode === 0) {\n      dispatch(setStatusProfile(status));\n    }\n  };\n};\nexport default profileReducer;","map":{"version":3,"sources":["C:/Users/Katerina/PhpstormProjects/react-practice/src/redux/profile-reducer.js"],"names":["ProfileAPI","UserAPI","updateNewTextPost","addpost","SET_USER_PROFILE","SET_STATUS","SET_PHOTO","initialState","postInfo","id","massage","like","profile","status","photo","profileReducer","state","action","type","newPost","text","newPostText","nextText","addPostText","setStatusProfile","updateNewPostText","setUsersProfile","setUsersPhoto","setPhotoApi","formData","config","dispatch","response","data","resultCode","photos","small","getUsersProfile","userId","getProfile","getStatus","updateStatus","setStatus"],"mappings":"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","sourcesContent":["import {ProfileAPI, UserAPI} from \"../api/api\";\r\n\r\nlet updateNewTextPost = 'updateNewTextPost';\r\nlet addpost = 'ADD-POST';\r\nlet SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nlet SET_STATUS = 'SET_STATUS'\r\nlet SET_PHOTO = 'SET_PHOTO'\r\nlet initialState = {\r\n    postInfo: [\r\n        {\r\n            id: 1,\r\n            massage: 'post1',\r\n            like: 12\r\n        },\r\n        {\r\n            id: 2,\r\n            massage: 'post2',\r\n            like: 20\r\n        },\r\n        {\r\n            id: 3,\r\n            massage: 'post3',\r\n            like: 1\r\n        },\r\n    ],\r\n    profile: null,\r\n    status: '',\r\n    photo: null\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case addpost:\r\n\r\n            let newPost = {\r\n                id: action.id,\r\n                massage: action.text,\r\n                like: 0\r\n            };\r\n\r\n\r\n            return {\r\n                ...state,\r\n                postInfo: [...state.postInfo, newPost],\r\n\r\n            }\r\n        case updateNewTextPost:\r\n\r\n            return {\r\n                ...state,\r\n                newPostText: action.nextText\r\n            }\r\n        case SET_USER_PROFILE:\r\n\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SET_PHOTO:\r\n            return {\r\n                ...state,\r\n                photo: action.photo\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\nexport const addPostText = (id, text) => {\r\n\r\n    return {\r\n        type: addpost,\r\n        id: id,\r\n        text\r\n    }\r\n};\r\nexport const setStatusProfile = (status) => {\r\n\r\n    return {\r\n        type: SET_STATUS,\r\n        status: status\r\n    }\r\n};\r\n\r\nexport const updateNewPostText = (text) => {\r\n\r\n    return {\r\n        type: updateNewTextPost,\r\n        nextText: text\r\n    }\r\n};\r\n\r\n\r\nexport const setUsersProfile = (profile) => ({type: SET_USER_PROFILE, profile});\r\n\r\nexport const setUsersPhoto = (photo) => ({type: SET_PHOTO, photo});\r\nexport const setPhotoApi = (formData, config) => {\r\n    debugger\r\n    return async (dispatch) => {\r\n\r\n      let response = await  ProfileAPI.photo(formData, config)\r\n\r\n            if (response.data.resultCode == 0) {\r\n                // console.log(response.data.data.photos.small)\r\n                setUsersPhoto(response.data.data.photos.small)\r\n            }\r\n    }\r\n}\r\n\r\nexport const getUsersProfile = (userId) => {\r\n    return async (dispatch) => {\r\n        let response = await UserAPI.getProfile(userId)\r\n        dispatch(setUsersProfile(response.data))\r\n\r\n    }\r\n}\r\nexport const getStatus = (userId) => {\r\n    return async (dispatch) => {\r\n\r\n        let response = await ProfileAPI.getStatus(userId)\r\n        dispatch(setStatusProfile(response.data))\r\n\r\n    }\r\n}\r\nexport const updateStatus = (status) => {\r\n\r\n    return async (dispatch) => {\r\n        let response = await ProfileAPI.setStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatusProfile(status))\r\n        }\r\n    }\r\n}\r\nexport default profileReducer"]},"metadata":{},"sourceType":"module"}
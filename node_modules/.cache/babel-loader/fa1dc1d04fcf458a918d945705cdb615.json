{"ast":null,"code":"import * as axios from \"axios\";\nexport const instance = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    'API-KEY': '50f1f503-9c26-452c-b6b0-8a3049400c9f'\n  }\n});\nexport const UserAPI = {\n  getUsers(currentPage = 1, pageSize = 10) {\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => {\n      return response.data;\n    });\n  },\n\n  follow(usersId) {\n    return instance.post(`follow/${usersId}`);\n  },\n\n  unfollow(usersId) {\n    return instance.delete(`follow/${usersId}`);\n  },\n\n  getProfile(userId) {\n    return ProfileAPI.getProfile(userId);\n  }\n\n};\nexport const ProfileAPI = {\n  getProfile(userId) {\n    return instance.get(`profile/` + userId);\n  },\n\n  saveProfile(profile) {\n    return instance.put(`profile`, profile);\n  },\n\n  photo(file) {\n    const formData = new FormData();\n    formData.append('image', file);\n    return instance.put('/profile/photo', formData, {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    });\n  },\n\n  getStatus(userId) {\n    return instance.get(`profile/status/` + userId);\n  },\n\n  setStatus(status) {\n    return instance.put(`profile/status/`, {\n      status: status\n    });\n  }\n\n};\nexport const authAPI = {\n  me() {\n    return instance.get(`auth/me`);\n  },\n\n  login(email, password, rememberMe = false, captcha = null) {\n    return instance.post(`auth/login`, {\n      email,\n      password,\n      rememberMe,\n      captcha\n    });\n  },\n\n  logout() {\n    return instance.delete(`auth/login`);\n  }\n\n};\nexport const securityAPI = {\n  getCaptchaUrl() {\n    return instance.get(`security/get-captcha-url`);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/Katerina/PhpstormProjects/react-practice/src/api/api.js"],"names":["axios","instance","create","withCredentials","baseURL","headers","UserAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","usersId","post","unfollow","delete","getProfile","userId","ProfileAPI","saveProfile","profile","put","photo","file","formData","FormData","append","getStatus","setStatus","status","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl"],"mappings":"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","sourcesContent":["import * as axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {'API-KEY': '50f1f503-9c26-452c-b6b0-8a3049400c9f'}\r\n});\r\nexport const UserAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(usersId) {\r\n        return instance.post(`follow/${usersId}`)\r\n\r\n    },\r\n    unfollow(usersId) {\r\n        return instance.delete(`follow/${usersId}`)\r\n\r\n    },\r\n    getProfile(userId) {\r\n        return ProfileAPI.getProfile(userId)\r\n\r\n    }\r\n}\r\nexport const ProfileAPI = {\r\n\r\n    getProfile(userId) {\r\n        return instance.get(`profile/` + userId)\r\n\r\n    },\r\n    saveProfile(profile) {\r\n        return instance.put(`profile`, profile)\r\n\r\n    },\r\n    photo( file){\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append('image', file);\r\n\r\n        return instance.put('/profile/photo', formData, {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    getStatus(userId) {\r\n\r\n        return instance.get(`profile/status/` + userId)\r\n\r\n    },\r\n    setStatus(status) {\r\n\r\n        return instance.put(`profile/status/`, {status: status})\r\n\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n\r\n    login(email, password, rememberMe = false,   captcha = null) {\r\n\r\n        return instance.post(`auth/login`, {email, password, rememberMe,   captcha })\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
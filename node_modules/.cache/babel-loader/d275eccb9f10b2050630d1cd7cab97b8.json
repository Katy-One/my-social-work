{"ast":null,"code":"import { ProfileAPI, UserAPI } from \"../api/api\";\nimport { stopSubmit } from 'redux-form';\nlet updateNewTextPost = 'updateNewTextPost';\nlet addpost = 'ADD-POST';\nlet SET_USER_PROFILE = 'SET_USER_PROFILE';\nlet SET_STATUS = 'SET_STATUS';\nlet SET_PHOTO = 'SET_PHOTO';\nlet initialState = {\n  postInfo: [{\n    id: 1,\n    massage: 'post1',\n    like: 12\n  }, {\n    id: 2,\n    massage: 'post2',\n    like: 20\n  }, {\n    id: 3,\n    massage: 'post3',\n    like: 1\n  }],\n  profile: null,\n  status: ''\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case addpost:\n      let newPost = {\n        id: action.id,\n        massage: action.text,\n        like: 0\n      };\n      return { ...state,\n        postInfo: [...state.postInfo, newPost]\n      };\n\n    case updateNewTextPost:\n      return { ...state,\n        newPostText: action.nextText\n      };\n\n    case SET_USER_PROFILE:\n      return { ...state,\n        profile: action.profile\n      };\n\n    case SET_STATUS:\n      return { ...state,\n        status: action.status\n      };\n\n    case SET_PHOTO:\n      return { ...state,\n        profile: { ...state.profile,\n          photos: action.photo\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const addPostText = (id, text) => {\n  return {\n    type: addpost,\n    id: id,\n    text\n  };\n};\nexport const setStatusProfile = status => {\n  return {\n    type: SET_STATUS,\n    status: status\n  };\n};\nexport const updateNewPostText = text => {\n  return {\n    type: updateNewTextPost,\n    nextText: text\n  };\n};\nexport const setUsersProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setUsersPhoto = photo => ({\n  type: SET_PHOTO,\n  photo\n});\nexport const setPhotoApi = file => {\n  return async dispatch => {\n    let response = await ProfileAPI.photo(file);\n\n    if (response.data.resultCode == 0) {\n      console.log(response.data);\n      dispatch(setUsersPhoto(response.data.data.photos));\n    }\n  };\n};\nexport const getUsersProfile = userId => {\n  return async dispatch => {\n    let response = await UserAPI.getProfile(userId);\n    dispatch(setUsersProfile(response.data));\n  };\n};\nexport const getStatus = userId => {\n  return async dispatch => {\n    let response = await ProfileAPI.getStatus(userId);\n    dispatch(setStatusProfile(response.data));\n  };\n};\nexport const saveProfile = profile => {\n  return async (dispatch, getState) => {\n    let id = getState().auth.userId;\n    let response = await ProfileAPI.saveProfile(profile);\n\n    if (response.data.resultCode === 0) {\n      dispatch(getUsersProfile(id));\n    } else {\n      console.log(response.data);\n      let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'; // dispatch(stopSubmit('dataForm', {_error: message}))\n\n      let arr = message.split(' ').reverse().join().split(' ,', 1);\n      console.log(arr);\n      dispatch(stopSubmit('dataForm', {\n        'contacts': {\n          facebook: message\n        }\n      }));\n      return Promise.reject(response.data.messages[0]);\n    }\n  };\n};\nexport const updateStatus = status => {\n  return async dispatch => {\n    let response = await ProfileAPI.setStatus(status);\n\n    if (response.data.resultCode === 0) {\n      dispatch(setStatusProfile(status));\n    }\n  };\n};\nexport default profileReducer;","map":{"version":3,"sources":["C:/Users/Katerina/PhpstormProjects/react-practice/src/redux/profile-reducer.js"],"names":["ProfileAPI","UserAPI","stopSubmit","updateNewTextPost","addpost","SET_USER_PROFILE","SET_STATUS","SET_PHOTO","initialState","postInfo","id","massage","like","profile","status","profileReducer","state","action","type","newPost","text","newPostText","nextText","photos","photo","addPostText","setStatusProfile","updateNewPostText","setUsersProfile","setUsersPhoto","setPhotoApi","file","dispatch","response","data","resultCode","console","log","getUsersProfile","userId","getProfile","getStatus","saveProfile","getState","auth","message","messages","length","arr","split","reverse","join","facebook","Promise","reject","updateStatus","setStatus"],"mappings":"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","sourcesContent":["import {ProfileAPI, UserAPI} from \"../api/api\";\r\nimport {stopSubmit} from 'redux-form';\r\n\r\nlet updateNewTextPost = 'updateNewTextPost';\r\nlet addpost = 'ADD-POST';\r\nlet SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nlet SET_STATUS = 'SET_STATUS'\r\nlet SET_PHOTO = 'SET_PHOTO'\r\nlet initialState = {\r\n    postInfo: [\r\n        {\r\n            id: 1,\r\n            massage: 'post1',\r\n            like: 12\r\n        },\r\n        {\r\n            id: 2,\r\n            massage: 'post2',\r\n            like: 20\r\n        },\r\n        {\r\n            id: 3,\r\n            massage: 'post3',\r\n            like: 1\r\n        },\r\n    ],\r\n    profile: null,\r\n    status: '',\r\n\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case addpost:\r\n\r\n            let newPost = {\r\n                id: action.id,\r\n                massage: action.text,\r\n                like: 0\r\n            };\r\n\r\n\r\n            return {\r\n                ...state,\r\n                postInfo: [...state.postInfo, newPost],\r\n\r\n            }\r\n        case updateNewTextPost:\r\n\r\n            return {\r\n                ...state,\r\n                newPostText: action.nextText\r\n            }\r\n        case SET_USER_PROFILE:\r\n\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SET_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photo}\r\n\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\nexport const addPostText = (id, text) => {\r\n\r\n    return {\r\n        type: addpost,\r\n        id: id,\r\n        text\r\n    }\r\n};\r\nexport const setStatusProfile = (status) => {\r\n\r\n    return {\r\n        type: SET_STATUS,\r\n        status: status\r\n    }\r\n};\r\nexport const updateNewPostText = (text) => {\r\n\r\n    return {\r\n        type: updateNewTextPost,\r\n        nextText: text\r\n    }\r\n};\r\nexport const setUsersProfile = (profile) => ({type: SET_USER_PROFILE, profile});\r\nexport const setUsersPhoto = (photo) => ({type: SET_PHOTO, photo});\r\nexport const setPhotoApi = (file) => {\r\n\r\n    return async (dispatch) => {\r\n\r\n\r\n        let response = await ProfileAPI.photo(file)\r\n\r\n        if (response.data.resultCode == 0) {\r\n            console.log(response.data)\r\n            dispatch(setUsersPhoto(response.data.data.photos))\r\n\r\n\r\n        }\r\n    }\r\n}\r\nexport const getUsersProfile = (userId) => {\r\n\r\n    return async (dispatch) => {\r\n        let response = await UserAPI.getProfile(userId)\r\n\r\n        dispatch(setUsersProfile(response.data))\r\n\r\n    }\r\n}\r\nexport const getStatus = (userId) => {\r\n    return async (dispatch) => {\r\n\r\n        let response = await ProfileAPI.getStatus(userId)\r\n        dispatch(setStatusProfile(response.data))\r\n\r\n    }\r\n}\r\nexport const saveProfile = (profile) => {\r\n    return async (dispatch, getState) => {\r\n        let id = getState().auth.userId\r\n        let response = await ProfileAPI.saveProfile(profile)\r\n\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getUsersProfile(id))\r\n        }else {\r\n            console.log(response.data)\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n\r\n            // dispatch(stopSubmit('dataForm', {_error: message}))\r\n            let arr = message.split(' ').reverse().join().split(' ,', 1)\r\n            console.log(arr)\r\n             dispatch(stopSubmit('dataForm', {'contacts':{facebook: message} }))\r\n            return Promise.reject(response.data.messages[0])\r\n        }\r\n\r\n\r\n    }\r\n}\r\nexport const updateStatus = (status) => {\r\n\r\n    return async (dispatch) => {\r\n        let response = await ProfileAPI.setStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatusProfile(status))\r\n        }\r\n    }\r\n}\r\nexport default profileReducer"]},"metadata":{},"sourceType":"module"}
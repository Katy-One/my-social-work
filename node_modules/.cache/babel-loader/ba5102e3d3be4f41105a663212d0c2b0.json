{"ast":null,"code":"import { UserAPI } from \"../api/api\";\nconst FOLLOWED = 'FOLLOWED';\nconst UNFOLLOWED = \"UNFOLLOWED\";\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USER_COUNT = 'SET_TOTAL_USER_COUNT';\nconst LOADING = 'LOADING';\nlet initialState = {\n  users: [],\n  pageSize: 20,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOWED:\n      return { ...state,\n        users: state.users.map(el => {\n          if (el.id === action.id) {\n            return { ...el,\n              followed: true\n            };\n          }\n\n          return el;\n        })\n      };\n\n    case UNFOLLOWED:\n      return { ...state,\n        users: state.users.map(el => {\n          if (el.id === action.id) {\n            return { ...el,\n              followed: false\n            };\n          }\n\n          return el;\n        })\n      };\n\n    case SET_USERS:\n      if (action.flag) {\n        return { ...state,\n          users: [...state.users, ...action.users]\n        };\n      } else {\n        return { ...state,\n          users: [...action.users]\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SET_TOTAL_USER_COUNT:\n      return { ...state,\n        totalUsersCount: action.totalUsersCount\n      };\n\n    case LOADING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default usersReducer;\nexport const follow = id => {\n  return {\n    type: FOLLOWED,\n    id: id\n  };\n};\nexport const unfollow = id => {\n  return {\n    type: UNFOLLOWED,\n    id: id\n  };\n};\nexport const setUsers = (users, flag) => {\n  return {\n    type: SET_USERS,\n    users: users,\n    flag: flag\n  };\n};\nexport const setCurrentPage = page => {\n  return {\n    type: SET_CURRENT_PAGE,\n    currentPage: page\n  };\n};\nexport const setTotalUsersCount = count => {\n  return {\n    type: SET_TOTAL_USER_COUNT,\n    totalUsersCount: count\n  };\n};\nexport const setIsFetching = load => {\n  return {\n    type: LOADING,\n    isFetching: load\n  };\n};\nexport const getUsersThunk = dispatch => {\n  dispatch(setIsFetching(true));\n  UserAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\n    dispatch(setIsFetching(false));\n    dispatch(setUsers(data.items));\n    this.props.setTotalUsersCount(data.totalCount);\n  });\n};","map":{"version":3,"sources":["C:/Users/Katerina/PhpstormProjects/react-practice/src/redux/users-reducer.js"],"names":["UserAPI","FOLLOWED","UNFOLLOWED","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USER_COUNT","LOADING","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","usersReducer","state","action","type","map","el","id","followed","flag","follow","unfollow","setUsers","setCurrentPage","page","setTotalUsersCount","count","setIsFetching","load","getUsersThunk","dispatch","getUsers","props","then","data","items","totalCount"],"mappings":"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","sourcesContent":["import {UserAPI} from \"../api/api\";\r\n\r\nconst FOLLOWED = 'FOLLOWED'\r\nconst UNFOLLOWED = \"UNFOLLOWED\"\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USER_COUNT = 'SET_TOTAL_USER_COUNT'\r\nconst LOADING = 'LOADING'\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 20,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case FOLLOWED:\r\n\r\n            return {\r\n                ...state,\r\n\r\n                users: state.users.map((el) => {\r\n                    if (el.id === action.id) {\r\n                        return {...el, followed: true}\r\n                    }\r\n                    return el\r\n                })\r\n            }\r\n        case UNFOLLOWED:\r\n            return {\r\n                ...state,\r\n                users: state.users.map((el) => {\r\n                    if (el.id === action.id) {\r\n                        return {...el, followed: false}\r\n                    }\r\n                    return el\r\n                })\r\n            }\r\n        case SET_USERS:\r\n\r\n            if(action.flag){\r\n                return {\r\n\r\n                    ...state, users: [...state.users, ...action.users]\r\n                }\r\n            }else{\r\n                return {\r\n\r\n                    ...state, users: [...action.users]\r\n                }\r\n            }\r\n\r\n        case SET_CURRENT_PAGE:\r\n\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage,\r\n            }\r\n        case SET_TOTAL_USER_COUNT:\r\n\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount,\r\n            }\r\n        case LOADING:\r\n            return{\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\nexport const follow = (id) => {return {type: FOLLOWED, id: id}};\r\nexport const unfollow = (id) => {return {type: UNFOLLOWED, id: id}};\r\nexport const setUsers = (users, flag) => {return {type: SET_USERS, users: users, flag:flag}};\r\nexport const setCurrentPage = (page) => {\r\n\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage: page\r\n    }\r\n};\r\nexport const setTotalUsersCount = (count) => {\r\n\r\n    return {\r\n        type: SET_TOTAL_USER_COUNT,\r\n        totalUsersCount: count,\r\n\r\n    }\r\n};\r\nexport const setIsFetching =(load) => {\r\n\r\n    return {\r\n        type: LOADING,\r\n        isFetching: load\r\n    }\r\n};\r\n\r\n\r\nexport  const getUsersThunk =(dispatch) =>{\r\n    dispatch( setIsFetching(true))\r\n\r\n    UserAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n        dispatch(setIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        this.props.setTotalUsersCount(data.totalCount)\r\n    })\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from 'redux-form';\nconst SET_USER_DATA = 'SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  cuptchaUrl: null\n};\n\nconst autorReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    case GET_CAPTCHA_URL_SUCCESS:\n      debugger;\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setUserData = (userId, email, login, isAuth) => {\n  return {\n    type: SET_USER_DATA,\n    payload: {\n      userId,\n      email,\n      login,\n      isAuth\n    }\n  };\n};\n\nconst getCaptchaUrlSuccess = captchaUrl => {\n  return {\n    type: GET_CAPTCHA_URL_SUCCESS,\n    payload: {\n      captchaUrl\n    }\n  };\n};\n\nexport const setAuth = () => {\n  return async dispatch => {\n    let response = await authAPI.me();\n\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(setUserData(id, email, login, true));\n    }\n  };\n};\nexport const login = (email, password, rememberMe) => {\n  return async dispatch => {\n    let response = await authAPI.login(email, password, rememberMe);\n\n    if (response.data.resultCode === 0) {\n      dispatch(setAuth());\n    } else {\n      console.log(response.data);\n\n      if (response.data.resultCode === 10) {\n        dispatch(getCaptchaUrl());\n      }\n\n      let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\n      dispatch(stopSubmit('login', {\n        _error: message\n      }));\n    }\n  };\n};\nexport const getCaptchaUrl = () => {\n  return async dispatch => {\n    let response = await securityAPI.getCaptchaUrl();\n    const captchaUrl = response.data.url;\n    debugger;\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\n  };\n};\nexport const logout = () => {\n  return async dispatch => {\n    let response = await authAPI.logout();\n\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(setUserData(null, null, null, false));\n    }\n  };\n};\nexport default autorReducer;","map":{"version":3,"sources":["C:/Users/Katerina/PhpstormProjects/react-practice/src/redux/auth-reducer.js"],"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","cuptchaUrl","autorReducer","state","action","type","payload","setUserData","getCaptchaUrlSuccess","captchaUrl","setAuth","dispatch","response","me","data","resultCode","id","password","rememberMe","console","log","getCaptchaUrl","message","messages","length","_error","url","logout"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,WAAjB,QAAmC,YAAnC;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAGA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,uBAAuB,GAAG,yBAAhC;AACA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO;AAKfC,EAAAA,UAAU,EAAE;AALG,CAAnB;;AASA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAEnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAMX,aAAN;AAEI,aAAO,EACH,GAAGS,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ,SAAMX,uBAAN;AACR;AACY,aAAO,EACH,GAAGQ,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAMJ;AACI,aAAOH,KAAP;AAhBR;AAkBH,CApBD;;AAqBA,OAAO,MAAMI,WAAW,GAAG,CAACV,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,KAAkC;AAEzD,SAAO;AACHK,IAAAA,IAAI,EAAEX,aADH;AAEHY,IAAAA,OAAO,EAAE;AAACT,MAAAA,MAAD;AAASC,MAAAA,KAAT;AAAgBC,MAAAA,KAAhB;AAAuBC,MAAAA;AAAvB;AAFN,GAAP;AAIH,CANM;;AAOP,MAAMQ,oBAAoB,GAAIC,UAAD,IAAgB;AAEzC,SAAO;AACHJ,IAAAA,IAAI,EAAEV,uBADH;AAEHW,IAAAA,OAAO,EAAE;AAACG,MAAAA;AAAD;AAFN,GAAP;AAIH,CAND;;AASA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAIC,QAAQ,GAAG,MAAMrB,OAAO,CAACsB,EAAR,EAArB;;AACA,QAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,UAAI;AAACC,QAAAA,EAAD;AAAKlB,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBa,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACAH,MAAAA,QAAQ,CAACJ,WAAW,CAACS,EAAD,EAAKlB,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAZ,CAAR;AAEH;AACJ,GAPD;AASH,CAVM;AAWP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQmB,QAAR,EAAkBC,UAAlB,KAAiC;AAElD,SAAO,MAAOP,QAAP,IAAoB;AACvB,QAAIC,QAAQ,GAAG,MAAMrB,OAAO,CAACQ,KAAR,CAAcD,KAAd,EAAqBmB,QAArB,EAA+BC,UAA/B,CAArB;;AACA,QAAIN,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACD,OAAO,EAAR,CAAR;AACH,KAFD,MAEO;AACHS,MAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACE,IAArB;;AACA,UAAIF,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,EAAjC,EAAqC;AACjCJ,QAAAA,QAAQ,CAACU,aAAa,EAAd,CAAR;AACH;;AACD,UAAIC,OAAO,GAAGV,QAAQ,CAACE,IAAT,CAAcS,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCZ,QAAQ,CAACE,IAAT,CAAcS,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACAZ,MAAAA,QAAQ,CAAClB,UAAU,CAAC,OAAD,EAAU;AAACgC,QAAAA,MAAM,EAAEH;AAAT,OAAV,CAAX,CAAR;AACH;AACJ,GAZD;AAcH,CAhBM;AAiBP,OAAO,MAAMD,aAAa,GAAG,MAAM;AAE/B,SAAO,MAAOV,QAAP,IAAoB;AACvB,QAAIC,QAAQ,GAAG,MAAMpB,WAAW,CAAC6B,aAAZ,EAArB;AACA,UAAMZ,UAAU,GAAGG,QAAQ,CAACE,IAAT,CAAcY,GAAjC;AACA;AACAf,IAAAA,QAAQ,CAACH,oBAAoB,CAACC,UAAD,CAArB,CAAR;AAEH,GAND;AAQH,CAVM;AAWP,OAAO,MAAMkB,MAAM,GAAG,MAAM;AACxB,SAAO,MAAOhB,QAAP,IAAoB;AACvB,QAAIC,QAAQ,GAAG,MAAMrB,OAAO,CAACoC,MAAR,EAArB;;AACA,QAAIf,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,UAAI;AAACC,QAAAA,EAAD;AAAKlB,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBa,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACAH,MAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAZ,CAAR;AACH;AACJ,GAND;AAQH,CATM;AAUP,eAAeL,YAAf","sourcesContent":["import {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from 'redux-form'\r\n\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS'\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    cuptchaUrl: null\r\n}\r\n\r\n\r\nconst autorReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case  SET_USER_DATA:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case  GET_CAPTCHA_URL_SUCCESS:\r\ndebugger\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\nexport const setUserData = (userId, email, login, isAuth) => {\r\n\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {userId, email, login, isAuth}\r\n    }\r\n};\r\nconst getCaptchaUrlSuccess = (captchaUrl) => {\r\n\r\n    return {\r\n        type: GET_CAPTCHA_URL_SUCCESS,\r\n        payload: {captchaUrl}\r\n    }\r\n};\r\n\r\n\r\nexport const setAuth = () => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.me();\r\n        if (response.data.resultCode === 0) {\r\n            let {id, email, login} = response.data.data\r\n            dispatch(setUserData(id, email, login, true))\r\n\r\n        }\r\n    }\r\n\r\n}\r\nexport const login = (email, password, rememberMe) => {\r\n\r\n    return async (dispatch) => {\r\n        let response = await authAPI.login(email, password, rememberMe)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuth())\r\n        } else {\r\n            console.log(response.data)\r\n            if (response.data.resultCode === 10) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n    }\r\n\r\n}\r\nexport const getCaptchaUrl = () => {\r\n\r\n    return async (dispatch) => {\r\n        let response = await securityAPI.getCaptchaUrl()\r\n        const captchaUrl = response.data.url;\r\n        debugger\r\n        dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n\r\n    }\r\n\r\n}\r\nexport const logout = () => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.logout();\r\n        if (response.data.resultCode === 0) {\r\n            let {id, email, login} = response.data.data\r\n            dispatch(setUserData(null, null, null, false))\r\n        }\r\n    }\r\n\r\n}\r\nexport default autorReducer"]},"metadata":{},"sourceType":"module"}
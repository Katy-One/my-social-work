{"ast":null,"code":"import { UserAPI } from \"../api/api\";\nimport { updateObjectInArr } from \"../utils/object-helper\";\nconst FOLLOWED = 'FOLLOWED';\nconst UNFOLLOWED = \"UNFOLLOWED\";\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USER_COUNT = 'SET_TOTAL_USER_COUNT';\nconst LOADING = 'LOADING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 20,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOWED:\n      return { ...state,\n        users: updateObjectInArr(state.users, action.id, \"id\", {\n          followed: true\n        })\n      };\n\n    case UNFOLLOWED:\n      return { ...state,\n        users: updateObjectInArr(state.users, action.id, \"id\", {\n          followed: false\n        }) // users: state.users.map((el) => {\n        //     if (el.id === action.id) {\n        //         return {...el, followed: false}\n        //     }\n        //     return el\n        // })\n\n      };\n\n    case SET_USERS:\n      if (action.flag) {\n        return { ...state,\n          users: [...state.users, ...action.users]\n        };\n      } else {\n        return { ...state,\n          users: [...action.users]\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SET_TOTAL_USER_COUNT:\n      return { ...state,\n        totalUsersCount: action.totalUsersCount\n      };\n\n    case LOADING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      return { ...state,\n        followingInProgress: action.isProgress ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default usersReducer;\n\nconst follow = id => {\n  return {\n    type: FOLLOWED,\n    id: id\n  };\n};\n\nconst unfollow = id => {\n  return {\n    type: UNFOLLOWED,\n    id: id\n  };\n};\n\nexport const setUsers = (users, flag) => {\n  return {\n    type: SET_USERS,\n    users: users,\n    flag: flag\n  };\n};\nexport const setCurrentPage = page => {\n  return {\n    type: SET_CURRENT_PAGE,\n    currentPage: page\n  };\n};\nexport const setTotalUsersCount = count => {\n  return {\n    type: SET_TOTAL_USER_COUNT,\n    totalUsersCount: count\n  };\n};\nexport const setIsFetching = load => {\n  return {\n    type: LOADING,\n    isFetching: load\n  };\n};\nexport const isToggleProgress = (flag, userId) => {\n  return {\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\n    isProgress: flag,\n    userId: userId\n  };\n};\nexport const getUsers = (currentPage, pageSize) => {\n  return async dispatch => {\n    dispatch(setCurrentPage(currentPage));\n    dispatch(setIsFetching(true));\n    dispatch(isToggleProgress(true));\n    let data = await UserAPI.getUsers(currentPage, pageSize);\n    dispatch(setIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setTotalUsersCount(data.totalCount));\n  };\n};\nexport const followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(isToggleProgress(true, userId));\n  debugger;\n  let response = await apiMethod(userId);\n\n  if (response.data.resultCode == 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(isToggleProgress(false, userId));\n};\nexport const unfollowing = userId => {\n  return async dispatch => {\n    dispatch(isToggleProgress(true, userId));\n    let response = await UserAPI.unfollow(userId);\n\n    if (response.data.resultCode == 0) {\n      dispatch(unfollow(userId));\n    }\n\n    dispatch(isToggleProgress(false, userId));\n  };\n};\nexport const following = userId => {\n  return async dispatch => {\n    dispatch(isToggleProgress(true, userId));\n    let response = await UserAPI.follow(userId);\n\n    if (response.data.resultCode == 0) {\n      dispatch(follow(userId));\n    }\n\n    dispatch(isToggleProgress(false, userId));\n  };\n}; // export const unfollowing = (userId) => {\n//     return async (dispatch) => {\n//         followUnfollowFlow(dispatch, userId, UserAPI.unfollow.bind(UserAPI), unfollow)\n//     }\n//\n// }\n// export const following = (userId) => {\n//     return async (dispatch) => {\n//\n//         followUnfollowFlow(dispatch, userId, UserAPI.follow.bind(UserAPI), follow)\n//     }\n// }\n\nexport const loadingUsers = (page, flag, pageSize) => {\n  return async dispatch => {\n    dispatch(setCurrentPage(page));\n    dispatch(setIsFetching(true));\n    let data = await UserAPI.getUsers(page, pageSize);\n    dispatch(setIsFetching(false));\n    dispatch(setUsers(data.items, flag));\n  };\n};","map":{"version":3,"sources":["C:/Users/Katerina/PhpstormProjects/react-practice/src/redux/users-reducer.js"],"names":["UserAPI","updateObjectInArr","FOLLOWED","UNFOLLOWED","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USER_COUNT","LOADING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","id","followed","flag","isProgress","userId","filter","follow","unfollow","setUsers","setCurrentPage","page","setTotalUsersCount","count","setIsFetching","load","isToggleProgress","getUsers","dispatch","data","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","response","resultCode","unfollowing","following","loadingUsers"],"mappings":"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","sourcesContent":["import {UserAPI} from \"../api/api\";\r\nimport {updateObjectInArr} from \"../utils/object-helper\";\r\n\r\nconst FOLLOWED = 'FOLLOWED'\r\nconst UNFOLLOWED = \"UNFOLLOWED\"\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USER_COUNT = 'SET_TOTAL_USER_COUNT'\r\nconst LOADING = 'LOADING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 20,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case FOLLOWED:\r\n\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArr(state.users, action.id, \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOWED:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArr(state.users, action.id, \"id\", {followed: false})\r\n                // users: state.users.map((el) => {\r\n                //     if (el.id === action.id) {\r\n                //         return {...el, followed: false}\r\n                //     }\r\n                //     return el\r\n                // })\r\n            }\r\n        case SET_USERS:\r\n\r\n            if (action.flag) {\r\n                return {\r\n\r\n                    ...state, users: [...state.users, ...action.users]\r\n                }\r\n            } else {\r\n                return {\r\n\r\n                    ...state, users: [...action.users]\r\n                }\r\n            }\r\n\r\n        case SET_CURRENT_PAGE:\r\n\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage,\r\n            }\r\n        case SET_TOTAL_USER_COUNT:\r\n\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount,\r\n            }\r\n        case LOADING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isProgress\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n const follow = (id) => {\r\n    return {type: FOLLOWED, id: id}\r\n};\r\n const unfollow = (id) => {\r\n    return {type: UNFOLLOWED, id: id}\r\n};\r\nexport const setUsers = (users, flag) => {\r\n    return {type: SET_USERS, users: users, flag: flag}\r\n};\r\nexport const setCurrentPage = (page) => {\r\n\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage: page\r\n    }\r\n};\r\nexport const setTotalUsersCount = (count) => {\r\n\r\n    return {\r\n        type: SET_TOTAL_USER_COUNT,\r\n        totalUsersCount: count,\r\n\r\n    }\r\n};\r\nexport const setIsFetching = (load) => {\r\n\r\n    return {\r\n        type: LOADING,\r\n        isFetching: load\r\n    }\r\n};\r\nexport const isToggleProgress = (flag, userId) => {\r\n    return {type: TOGGLE_IS_FOLLOWING_PROGRESS, isProgress: flag, userId: userId}\r\n}\r\n\r\nexport const getUsers = (currentPage, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(setCurrentPage(currentPage))\r\n        dispatch(setIsFetching(true))\r\n        dispatch(isToggleProgress(true))\r\n        let data = await UserAPI.getUsers(currentPage, pageSize)\r\n        dispatch(setIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n\r\n}\r\nexport  const followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator)=>{\r\n    dispatch(isToggleProgress(true, userId))\r\n    debugger\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(isToggleProgress(false, userId))\r\n}\r\n\r\nexport const unfollowing = (userId) => {\r\n    return async (dispatch) => {\r\n        dispatch(isToggleProgress(true, userId))\r\n        let response = await UserAPI.unfollow(userId)\r\n        if (response.data.resultCode == 0) {\r\n            dispatch(unfollow(userId))\r\n        }\r\n        dispatch(isToggleProgress(false, userId))\r\n    }\r\n\r\n}\r\nexport const following = (userId) => {\r\n    return async (dispatch) => {\r\n        dispatch(isToggleProgress(true, userId))\r\n        let response = await UserAPI.follow(userId)\r\n        if (response.data.resultCode == 0) {\r\n            dispatch(follow(userId))\r\n        }\r\n        dispatch(isToggleProgress(false, userId))\r\n    }\r\n}\r\n// export const unfollowing = (userId) => {\r\n//     return async (dispatch) => {\r\n//         followUnfollowFlow(dispatch, userId, UserAPI.unfollow.bind(UserAPI), unfollow)\r\n//     }\r\n//\r\n// }\r\n// export const following = (userId) => {\r\n//     return async (dispatch) => {\r\n//\r\n//         followUnfollowFlow(dispatch, userId, UserAPI.follow.bind(UserAPI), follow)\r\n//     }\r\n// }\r\n\r\nexport const loadingUsers = (page, flag, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(setCurrentPage(page));\r\n        dispatch(setIsFetching(true))\r\n        let data = await UserAPI.getUsers(page, pageSize)\r\n        dispatch(setIsFetching(false))\r\n        dispatch(setUsers(data.items, flag))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
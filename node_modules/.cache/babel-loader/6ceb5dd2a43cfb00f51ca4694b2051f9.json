{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Katerina\\\\PhpstormProjects\\\\react-practice\\\\src\\\\components\\\\Profile\\\\MyPosts\\\\MyPosts.js\";\nimport React from \"react\";\nimport MyPost from './MyPost/MyPost';\nimport { Field, reset, reduxForm } from 'redux-form';\n\nlet submitMyForm = data => {};\n\nconst MyPostForm = props => {\n  const {\n    handleSubmit,\n    load,\n    pristine,\n    reset,\n    submitting,\n    submitMyForm\n  } = props;\n  const {\n    createRecord,\n    resetForm\n  } = props;\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit(submitMyForm),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(Field, {\n    placeholder: 'post text',\n    name: 'post_text',\n    component: \"textarea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    disabled: props.pristine || props.submitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Add post\"));\n}; // const afterSubmit = (result, dispatch) =>\n//     dispatch(reset('login'));\n\n\nconst ReduxMyPostForm = reduxForm({\n  // a unique name for the form\n  form: 'login' //onSubmitSuccess: afterSubmit,\n\n})(MyPostForm);\n\nconst MyPosts = props => {\n  console.log(props);\n  let arr_post = props.posts.map((el, i) => React.createElement(MyPost, {\n    massage: el.massage,\n    id: i + 1,\n    like: el.like,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }));\n  let newPostElement = React.createRef();\n\n  const addPost = () => {};\n\n  const onPostChange = () => {\n    let text = newPostElement.current.value;\n  };\n\n  let submitPostForm = data => {\n    console.log(data);\n    let id = props.posts.length + 1;\n    let text = data.post_text;\n    const {\n      createRecord,\n      resetForm\n    } = props;\n    createRecord(data).then(() => {\n      resetForm(); // do other success stuff\n\n      props.addPostText(id, text);\n      props.updateNewPostText(text);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \" My post\")), React.createElement(ReduxMyPostForm, {\n    onSubmit: submitPostForm,\n    text: props.NewPostText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, arr_post));\n};\n\nexport default MyPosts;","map":{"version":3,"sources":["C:/Users/Katerina/PhpstormProjects/react-practice/src/components/Profile/MyPosts/MyPosts.js"],"names":["React","MyPost","Field","reset","reduxForm","submitMyForm","data","MyPostForm","props","handleSubmit","load","pristine","submitting","createRecord","resetForm","ReduxMyPostForm","form","MyPosts","console","log","arr_post","posts","map","el","i","massage","like","newPostElement","createRef","addPost","onPostChange","text","current","value","submitPostForm","id","length","post_text","then","addPostText","updateNewPostText","NewPostText"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport MyPost from './MyPost/MyPost'\r\nimport {Field,reset, reduxForm} from 'redux-form'\r\n\r\nlet submitMyForm = (data) =>{\r\n\r\n }\r\nconst MyPostForm = (props) => {\r\n    const {handleSubmit, load, pristine, reset, submitting, submitMyForm} = props\r\n    const {createRecord, resetForm} = props;\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit(submitMyForm)}>\r\n\r\n\r\n            <div>\r\n                <Field placeholder={'post text'} name={'post_text'} component={\"textarea\"}/>\r\n            </div>\r\n\r\n\r\n            <button disabled={props.pristine || props.submitting}>Add post</button>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n// const afterSubmit = (result, dispatch) =>\r\n//     dispatch(reset('login'));\r\nconst ReduxMyPostForm = reduxForm({\r\n    // a unique name for the form\r\n    form: 'login',\r\n    //onSubmitSuccess: afterSubmit,\r\n})(MyPostForm)\r\nconst MyPosts = (props) => {\r\n    console.log(props)\r\n    let arr_post = props.posts.map((el, i) => <MyPost massage={el.massage} id={i + 1} like={el.like}/>);\r\n    let newPostElement = React.createRef()\r\n    const addPost = () => {\r\n\r\n\r\n    }\r\n    const onPostChange = () => {\r\n\r\n        let text = newPostElement.current.value;\r\n\r\n\r\n    }\r\n    let submitPostForm = (data) => {\r\n        console.log(data)\r\n        let id = props.posts.length + 1;\r\n        let text = data.post_text\r\n        const {createRecord, resetForm} = props;\r\n         createRecord(data).then(() => {\r\n            resetForm();\r\n            // do other success stuff\r\n            props.addPostText(id, text)\r\n\r\n            props.updateNewPostText(text)\r\n        });\r\n\r\n    }\r\n    return <div>\r\n        <div>\r\n            <h3> My post</h3>\r\n            {/*<textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText}/>*/}\r\n            {/*<button onClick={addPost}>add button</button>*/}\r\n\r\n        </div>\r\n        < ReduxMyPostForm onSubmit={submitPostForm} text={props.NewPostText}/>\r\n        <div>\r\n            {arr_post}\r\n        </div>\r\n    </div>\r\n}\r\nexport default MyPosts"]},"metadata":{},"sourceType":"module"}
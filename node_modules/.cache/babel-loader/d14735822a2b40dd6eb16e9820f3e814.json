{"ast":null,"code":"import { authAPI } from \"../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst autorReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setUserData = (userId, email, login, isAuth) => {\n  return {\n    type: SET_USER_DATA,\n    data: {\n      userId,\n      email,\n      login,\n      isAuth\n    }\n  };\n};\nexport const setAuth = (id, email, login, isAuth) => {\n  return dispatch => {\n    authAPI.me().then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          email,\n          login\n        } = response.data.data;\n        dispatch(setUserData(id, email, login, true));\n      }\n    });\n  };\n};\nexport const login = (email, password, rememberMe) => {\n  debugger;\n  return dispatch => {\n    authAPI.login().then(response => {\n      if (response.data.resultCode === 0) {\n        console.log(response);\n        let {\n          id,\n          email,\n          password,\n          rememberMe\n        } = response.data.data;\n        dispatch(setUserData(null, null, null, false));\n      }\n    });\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    authAPI.logout().then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(setAuth());\n      }\n    });\n  };\n};\nexport default autorReducer;","map":{"version":3,"sources":["C:/Users/Katerina/PhpstormProjects/react-practice/src/redux/auth-reducer.js"],"names":["authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","autorReducer","state","action","type","data","setUserData","setAuth","id","dispatch","me","then","response","resultCode","password","rememberMe","console","log","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AAEA,MAAMC,aAAa,GAAC,eAApB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAC,IADQ;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAC,IAHS;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAQA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAEnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAMT,aAAN;AAEI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAOJ;AACI,aAAOE,KAAP;AAXR;AAaH,CAfD;;AAgBA,OAAO,MAAOI,WAAW,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,KAAkC;AAC1D,SAAO;AACHI,IAAAA,IAAI,EAAET,aADH;AAEHU,IAAAA,IAAI,EAAE;AAACR,MAAAA,MAAD;AAASC,MAAAA,KAAT;AAAgBC,MAAAA,KAAhB;AAAuBC,MAAAA;AAAvB;AAFH,GAAP;AAIH,CALM;AAQP,OAAO,MAAMO,OAAO,GAAG,CAACC,EAAD,EAAKV,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,KAA4B;AAC/C,SAAQS,QAAD,IAAY;AACff,IAAAA,OAAO,CAACgB,EAAR,GAAaC,IAAb,CAAkBC,QAAQ,IAAI;AAC1B,UAAIA,QAAQ,CAACP,IAAT,CAAcQ,UAAd,KAA6B,CAAjC,EAAoC;AAChC,YAAI;AAACL,UAAAA,EAAD;AAAKV,UAAAA,KAAL;AAAYC,UAAAA;AAAZ,YAAqBa,QAAQ,CAACP,IAAT,CAAcA,IAAvC;AACAI,QAAAA,QAAQ,CAACH,WAAW,CAACE,EAAD,EAAKV,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAZ,CAAR;AAEH;AACJ,KAND;AAOH,GARD;AAUH,CAXM;AAYP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAiBC,UAAjB,KAA8B;AAC/C;AACA,SAAQN,QAAD,IAAY;AACff,IAAAA,OAAO,CAACK,KAAR,GAAgBY,IAAhB,CAAqBC,QAAQ,IAAI;AAC7B,UAAIA,QAAQ,CAACP,IAAT,CAAcQ,UAAd,KAA6B,CAAjC,EAAoC;AAChCG,QAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,YAAI;AAACJ,UAAAA,EAAD;AAAKV,UAAAA,KAAL;AAAYgB,UAAAA,QAAZ;AAAqBC,UAAAA;AAArB,YAAmCH,QAAQ,CAACP,IAAT,CAAcA,IAArD;AACAI,QAAAA,QAAQ,CAACH,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAZ,CAAR;AAEH;AACJ,KAPD;AAQH,GATD;AAWH,CAbM;AAcP,OAAO,MAAMY,MAAM,GAAG,MAAI;AACtB,SAAQT,QAAD,IAAY;AACff,IAAAA,OAAO,CAACwB,MAAR,GAAiBP,IAAjB,CAAsBC,QAAQ,IAAI;AAC9B,UAAIA,QAAQ,CAACP,IAAT,CAAcQ,UAAd,KAA6B,CAAjC,EAAoC;AAEhCJ,QAAAA,QAAQ,CAACF,OAAO,EAAR,CAAR;AAEH;AACJ,KAND;AAOH,GARD;AAUH,CAXM;AAYP,eAAeN,YAAf","sourcesContent":["import {authAPI} from \"../api/api\";\r\n\r\nconst SET_USER_DATA='SET_USER_DATA'\r\n\r\nlet initialState = {\r\n    userId:null,\r\n    email: null,\r\n    login:null,\r\n    isAuth: false\r\n}\r\n\r\n\r\nconst autorReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case  SET_USER_DATA:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\nexport const  setUserData = (userId, email, login, isAuth) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: {userId, email, login, isAuth}\r\n    }\r\n};\r\n\r\n\r\nexport const setAuth = (id, email, login, isAuth)=>{\r\n    return (dispatch)=>{\r\n        authAPI.me().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data\r\n                dispatch(setUserData(id, email, login, true))\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\nexport const login = (email, password,rememberMe)=>{\r\n    debugger\r\n    return (dispatch)=>{\r\n        authAPI.login().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                console.log(response)\r\n                let {id, email, password,rememberMe} = response.data.data\r\n                dispatch(setUserData(null, null, null, false))\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\nexport const logout = ()=>{\r\n    return (dispatch)=>{\r\n        authAPI.logout().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n\r\n                dispatch(setAuth())\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\nexport default autorReducer"]},"metadata":{},"sourceType":"module"}
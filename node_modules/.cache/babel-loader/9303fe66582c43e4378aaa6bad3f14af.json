{"ast":null,"code":"import { ProfileAPI, UserAPI } from \"../api/api\";\nlet updateNewTextPost = 'updateNewTextPost';\nlet addpost = 'ADD-POST';\nlet SET_USER_PROFILE = 'SET_USER_PROFILE';\nlet SET_STATUS = 'SET_STATUS';\nlet initialState = {\n  postInfo: [{\n    id: 1,\n    massage: 'post1',\n    like: 12\n  }, {\n    id: 2,\n    massage: 'post2',\n    like: 20\n  }, {\n    id: 3,\n    massage: 'post3',\n    like: 1\n  }],\n  newPostText: 'hhh',\n  profile: null,\n  status: ''\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case addpost:\n      let newPost = {\n        id: action.id,\n        massage: action.text,\n        like: 0\n      };\n      return { ...state,\n        postInfo: [...state.postInfo, newPost]\n      };\n\n    case updateNewTextPost:\n      return { ...state,\n        newPostText: action.nextText\n      };\n\n    case SET_USER_PROFILE:\n      return { ...state,\n        profile: action.profile\n      };\n\n    case SET_STATUS:\n      return { ...state,\n        status: action.status\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const addPostText = (id, text) => {\n  return {\n    type: addpost,\n    id: id,\n    text\n  };\n};\nexport const setStatusProfile = status => {\n  return {\n    type: SET_STATUS,\n    status: status\n  };\n};\nexport const updateNewPostText = text => {\n  return {\n    type: updateNewTextPost,\n    nextText: text\n  };\n};\nexport const setUsersProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const getUsersProfile = userId => {\n  return async dispatch => {\n    let response = await UserAPI.getProfile(userId);\n    dispatch(setUsersProfile(response.data));\n  };\n};\nexport const getStatus = userId => {\n  return async dispatch => {\n    let response = await ProfileAPI.getStatus(userId);\n    dispatch(setStatusProfile(response.data));\n  };\n};\nexport const updateStatus = status => {\n  return async dispatch => {\n    let response = await ProfileAPI.setStatus(status);\n\n    if (response.data.resultCode === 0) {\n      dispatch(setStatusProfile(status));\n    }\n  };\n};\nexport default profileReducer;","map":{"version":3,"sources":["C:/Users/Katerina/PhpstormProjects/react-practice/src/redux/profile-reducer.js"],"names":["ProfileAPI","UserAPI","updateNewTextPost","addpost","SET_USER_PROFILE","SET_STATUS","initialState","postInfo","id","massage","like","newPostText","profile","status","profileReducer","state","action","type","newPost","text","nextText","addPostText","setStatusProfile","updateNewPostText","setUsersProfile","getUsersProfile","userId","dispatch","response","getProfile","data","getStatus","updateStatus","setStatus","resultCode"],"mappings":"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","sourcesContent":["import {ProfileAPI, UserAPI} from \"../api/api\";\r\n\r\nlet updateNewTextPost = 'updateNewTextPost';\r\nlet addpost = 'ADD-POST';\r\nlet SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nlet SET_STATUS = 'SET_STATUS'\r\nlet initialState = {\r\n    postInfo: [\r\n        {\r\n            id: 1,\r\n            massage: 'post1',\r\n            like: 12\r\n        },\r\n        {\r\n            id: 2,\r\n            massage: 'post2',\r\n            like: 20\r\n        },\r\n        {\r\n            id: 3,\r\n            massage: 'post3',\r\n            like: 1\r\n        },\r\n    ],\r\n    newPostText: 'hhh',\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case addpost:\r\n\r\n            let newPost = {\r\n                id: action.id,\r\n                massage: action.text,\r\n                like: 0\r\n            };\r\n\r\n\r\n            return {\r\n                ...state,\r\n                postInfo: [...state.postInfo, newPost],\r\n\r\n            }\r\n        case updateNewTextPost:\r\n\r\n            return {\r\n                ...state,\r\n                newPostText: action.nextText\r\n            }\r\n        case SET_USER_PROFILE:\r\n\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\nexport const addPostText = (id, text) => {\r\n\r\n    return {\r\n        type: addpost,\r\n        id: id,\r\n        text\r\n    }\r\n};\r\nexport const setStatusProfile = (status) => {\r\n\r\n    return {\r\n        type: SET_STATUS,\r\n        status: status\r\n    }\r\n};\r\n\r\nexport const updateNewPostText = (text) => {\r\n\r\n    return {\r\n        type: updateNewTextPost,\r\n        nextText: text\r\n    }\r\n};\r\n\r\n\r\nexport const setUsersProfile = (profile) => ({type: SET_USER_PROFILE, profile})\r\n\r\n\r\nexport const getUsersProfile = (userId) => {\r\n    return async (dispatch) => {\r\n        let response = await UserAPI.getProfile(userId)\r\n        dispatch(setUsersProfile(response.data))\r\n\r\n    }\r\n}\r\nexport  const getStatus =(userId)=>{\r\n    return async (dispatch)=>{\r\n\r\n        let response = await  ProfileAPI.getStatus(userId)\r\n        dispatch(setStatusProfile(response.data))\r\n      \r\n    }\r\n}\r\nexport const updateStatus = (status) => {\r\n\r\n    return async (dispatch) => {\r\n        let response = await ProfileAPI.setStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatusProfile(status))\r\n        }\r\n    }\r\n}\r\nexport default profileReducer"]},"metadata":{},"sourceType":"module"}